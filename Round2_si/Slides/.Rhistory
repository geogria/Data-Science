}
else {
binary_vector[-(1:(length(binary_vector) - noBits))]
}
}
binary(2)
binary(2,7)
binary(1:16,7)
2*binary(7)-1
2*binary(7,7)-1
sums <- rep(0, 128)
d <- c(1, 6, 4, 6, 2, 3, 5)
for(i in 1:128) {
signs <- 2*binary(i, 7)-1
sums[i] <- sum(d*signs)
}
sum(sums>=19)
histogram(sums)
hist(sums)
lines(19)
abline(v=19)
hist(sums, main='histogram of the test statistics', xlab='test statistics')
abline(v=19)
sums
sort(sums)
sum(sums>=19)-1
hist(sums, main='histogram of the test statistics', xlab='test statistics', breaks=20)
abline(v=19)
y <- c(2.16,2.45,2.91,3,2.71)
ybar <- mean(y)
ybar
anova(y)
?anova
(y-ybar)^2
sum((y-ybar)^2)
sum((y-ybar)^2)*25
F <- SST/4/153.4*120
SST <- sum((y-ybar)^2)*25
F <- SST/4/153.4*120
F
(p <- pf(F, 4, 120))
?qf
(p <- pf(F, 4, 120, lower tail=F)) # p value
(p <- pf(F, 4, 120, lower.tail=F)) # p value
(p <- pf(F, 4, 120, lower.tail=T)) # p value
(p <- pf(F, 4, 120, lower.tail = T)) # p value
(p <- pf(F, 4, 120, lower.tail = F)) # p value
(p <- pf(F, 4, 120, lower.tail = FALSE)) # p value
(p <- pf(F, 4, 120, lower.tail=FALSE)) # p value
getwd()
install.packages("oehlert_1.02.tar.gz",repos=NULL,type="source")
library(oehlert)
?oehlert
pr3.2
attach(pr3.2)
data <- read.table("http://www.stat.umn.edu/~gary/book/fcdae.data/pr3.2",header=TRUE)
data
anova(days~trt, data)
aov(days~trt, data)
anova(fit)
fit <- lm(days~trt, data)
anova(fit)
fit
fit <- lm(days~factor(trt), data)  # linear regression
anova(fit)  # anova
boxplot(days~factor(trt), data)
boxplot(days~factor(trt), data, xlab='treatment', ylab='longevity')
apply(data, mean, 2)
apply(data, 2, mean)
apply(data, 1, mean)
data[, 1] <- factor(data[, 1])
apply(data, 1, mean)
data
y <- aggregate(data[, 2], list(data$trt), mean)
y
(ybar <- mean(y))  # grand mean
(y <- aggregate(data[, 2], list(data$trt), mean))[, 2]  # group means
(ybar <- mean(y))  # grand mean
y
(y <- aggregate(data[, 2], list(data$trt), mean)[, 2])  # group means
(ybar <- mean(y))  # grand mean
(y[1]-ybar)  # treatment effect for first group
(y-ybar)  # treatment effects
(s <- sd(data$days))  # standard error
(s1 <- s*sqrt(1/25-1/125))  # standard error
1/25-1/125
1/25
1/125
(trt[1]-qt(120, 0.025))
(trt <- y-ybar)  # treatment effects
(s <- sd(data$days))  # standard error
(s1 <- s*sqrt(1/25-1/125))  # standard error for first treatment effect
(trt[1]-qt(120, 0.025))
?qt
(trt[1]-qt(0.975, 120)*s1, trt[1]+qt(0.975, 120)*s1)
c(trt[1]-qt(0.975, 120)*s1, trt[1]+qt(0.975, 120)*s1)
[ ,]
y
(se <- s/sqrt(25))  # standard error for grouup mean
y[1]-y[4]
2 * 3
x <- 1:1000
y <- log(x)
plot(x, y/x)
x <- 10
x
y <- c(1, 2, 3)
y
y
air <- read.csv("http://users.stat.umn.edu/~lendw004/datasets/air.csv", header=T)
head(air)
tail(air)
names(air)
y <- c(1, 2, 3)
getwd()
air1 <- read.csv("air.csv", header=T)
head(air1)
ais <- read.table("ais.txt", header=T)
head(ais)
attach(air1)
hist(Rain)
hist(JanTemp)
boxplot(Rain)
boxplot(JanTemp)
plot(Rain, JanTemp)
x <- 10
x
y <- c(1, 2, 3)
y
air <- read.csv("http://users.stat.umn.edu/~lendw004/datasets/air.csv", header=T)
head(air)
tail(air)
head(air)
tail(air)
names(air)
getwd()
getwd()
air1 <- read.csv("air.csv", header=T)
head(air1)
tail(air1)
ais <- read.table("ais.txt", header=T)
attach(air)
hist(Rain)
boxplot(Rain)
plot(Rain)
plot(JanTemp, Rain)
data <- read.table("http://www.stat.umn.edu/~gary/book/fcdae.data/pr3.2",header=TRUE)
data$trt <- factor(data$trt)  # transform trt into factors
mod3 <- aov(days ~ trt, data)
model.tables(mod3, 'mean')  # treatment means
TukeyHSD(mod3, which='trt', ordered=T, conf.level=0.95)
summary(mod3)
dim(data)
?model.tables
table(data)
table(data$trt)
summary(mod3)
curve(dtukey(x, 4, 120), -10, 10)
qtukey(2, 4, 120)
qtukey(0.1, 4, 120)
curve(df(x, 120), from = -4, to = 4)
curve(df(x, 1, 120), from = -4, to = 4)
(u1 <- qtukey(0.95, nmeans=5, df=120)/sqrt(2))
63.56 - 38.72 + c(1, -1) * u1 * sqrt(219.3 * (1 / 25 + 1 /25))
63.56 - 38.72 + c(-1, 1) * u1 * sqrt(219.3 * (1 / 25 + 1 /25))
26-11
26+11
(u2 <- qtukey(0.95, nmeans = 4, df = 120) / sqrt(2))  # critical value
63.56 - 56.76 + c(-1, 1) * u2 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
63.36 - 38.72 + c(-1, 1) * u2 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
(u3 <- qtukey(0.95, nmeans = 3, df = 120) / sqrt(2))  # critical value
model.tables(mod3, 'mean')  # treatment means
64.80 - 38.72 + c(-1, 1) * u1 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
64.80 - 56.76 + c(-1, 1) * u2 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
63.56 - 38.72 + c(-1, 1) * u2 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
63.36 - 38.72 + c(-1, 1) * u3 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
(u4 <- qtukey(0.95, nmeans = 2, df = 120) / sqrt(2))  # critical value
56.76 - 38.72 + c(-1, 1) * u4 * sqrt(219.3 * (1 / 25 + 1 /25))  # CI
(p <- pf(15.4456, 5, 18, lower.tail = F))  # p value
(p <- pf(15.4456, 5, 18, lower.tail = T))  # p value
(p <- pf(15.4456, 5, 18, lower.tail = F))  # p value
(p <- 1 - pf(15.4456, 5, 18, lower.tail = F))  # p value
NoU<-read.delim(“http://stat.umn.edu/~bkuzmak/data/Getting2NoUS2015.txt”,    header=T)
NoU<-read.delim("http://stat.umn.edu/~bkuzmak/data/Getting2NoUS2015.txt",    header=T)
attach(NoU)
NoU
mytable<- table    (flu,flu.shot)
mytable
getwd()
tenants = read.xls("/Users/si/Desktop/tenants.xls",header=TRUE)
tenants = read.table("/Users/si/Desktop/tenants.xls",header=TRUE)
tenants = read.table("/Users/si/Desktop/tenants.xls",header=TRUE)
tenants = read.csv("/Users/si/Desktop/tenants.csv",header=TRUE)
head(tenants)
attach(tenants)
class(plot.number)
??sort
?which
tenants[which(plot.number=1S2267)]
tenants[which(tenants$plot.number=1S2267)]
tenants[which(tenants$plot.number==1S2267)]
tenants[which(plot.number==1S2267)]
plot.number
levels(plot.number)
id <- levels(plot.number)
id
i=1
tenants[which(tenants$plot.number==id[i]), ]
levels(status)
as.numeric(levels(status))
v1 <- 0.4*0.6/40
v2 <- 0.5^2/40
crit <- qnorm(0.05, 0.5, v2)
p <- pnorm(crit, 0.4, v1)
p
crit
v1 <- 0.4*0.6
v2 <- 0.5^2
crit <- qnorm(0.05, 0.5, v2)
p <- pnorm(crit, 0.4, v1)
p
v1 <- 0.4*0.6/40
v2 <- 0.5^2/40
crit <- qnorm(0.05, 0.5, v2^0.5)
p <- pnorm(crit, 0.4, v1^0.5)
p
crit
crit <- qnorm(0.025, 0.5, v2^0.5)
p <- pnorm(crit, 0.4, v1^0.5)
p
source("src/R/MGGM.R")
dyn.load('lib/c_funcs.so')
library(MASS)
########### generating L true sparse precision and covariance matrices #######
set.seed(19870806) # seed to generate the truth
L <- num_of_matrix <- 4
### two different underlying matrices ###
L0 <- 2
p <- dim_of_matrix <-  20
n <- 120 #number of observations for each l
nn <- rep(n,L)
MAX_iter <- 200 #max number of iterations
Gene_cov<-function(p){
sigma <- runif(p-1,0.5,1)
covmat0 <- diag(1,p)
for (i in 1:(p-1)){
for (j in (i+1):p){
temp <- exp(-sum(sigma[i:(j-1)]/2))
covmat0[i,j] <- temp
covmat0[j,i] <- temp
}
}
return(covmat0)
}
covmat1 <- Gene_cov(p)
covmat_inverse1 <- solve(covmat1)
covmat2 <- Gene_cov(p)
covmat_inverse2 <- solve(covmat2)
## set first L/2 and last L/2 matrices to be the same
covmat0 <- cbind(matrix(rep(covmat1,L/2),p,p*L/2), matrix(rep(covmat2,L/2),p,p*L/2))
covmat_inverse0 <- cbind(matrix(rep(covmat_inverse1,L/2),p,p*L/2), matrix(rep(covmat_inverse2,L/2),p,p*L/2))
######	generating sample covariance matrices S_bar = [S_1, ... S_L]	###########
S_bar <- matrix(0,p,L*p)
for (l in 1:L){
temp <- mvrnorm(n = nn[l], rep(0,p), covmat0[,((l-1)*p+1):(l*p)])
S_bar[,((l-1)*p+1):(l*p)] <- (t(temp) %*% temp) / nn[l]
}
################ matrices generation ends ###############
Lambda1.vec <- log(p)*c(.8, .5, .4, .3, 0.2) #lasso penlaty
Lambda2.vec <- log(p)*c(.1, .08, .06, .05, .04, .03, .0) #grouping penalty
tau <- c(0.01) #thresholding parameter
################# generating graphs ##################
graph_complete = matrix(0,2,L*(L-1)/2)
for (l1 in 1:(L-1)){
graph_complete[,(L*(l1-1)-(l1-1)*l1/2+1):(L*l1-l1*(l1+1)/2)] = rbind(rep(l1,L-l1),(l1+1):L)
}
graph <- graph_complete - 1
sol_path <- MGGM.path(S_bar, nn, Lambda1.vec, Lambda2.vec, graph, tau)
getwd()
save.image("~/Desktop/results.RData")
install.packages("Rcpp")
library(Rcpp)
cppEval('1+1')
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
add(1,2,3)
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)order=rep(c(0, 1), c(7, 7))name <- c(High7, Low7)namet.test(High7-Low7)m3=NULLfor(j in 1:2000){  samp=sample(order,7)  m3[j]=mean(name[samp==0])-mean(name[samp==1])}hist(m3)sum(mean(High7-Low7)>m3)/2000
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)
order=rep(c(0, 1), c(7, 7))
name <- c(High7, Low7)
name
t.test(High7-Low7)
m3=NULL
for(j in 1:2000)
{
samp=sample(order,7)
m3[j]=mean(name[samp==0])-mean(name[samp==1])
}
hist(m3)
sum(mean(High7-Low7)>m3)/2000
set.seed(12)
for(j in 1:2000)
{
samp=sample(order,7)
m3[j]=mean(name[samp==0])-mean(name[samp==1])
}
hist(m3)
sum(mean(High7-Low7)>m3)/2000
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)
diff <- High7-Low7
t.test(High7-Low7)
m3=NULL
set.seed(12)
for(j in 1:2000)
{
samp=sample(diff, 4)
m3[j]=mean(abs(samp))
}
hist(m3)
sum(mean(abs(diff))>m3)/2000
t.test(High7-Low7)
install.packages('BHH')
install.packages('BHH2')
library(BHH2)
?permtest
permtest(High7, Low7)
High7=c( 0.855,.904,.759, .769, -.698, -.814)
Low7=c(-.773, -.700, -.771, -.743, .794, .669)
permtest(High7, Low7)
High7=c( 0.855,.904,.759, .769, -.698)
Low7=c(-.773, -.700, -.771, -.743, .794)
permtest(High7, Low7)
High7=c( 0.855,.904,.759, .769)
Low7=c(-.773, -.700, -.771, -.743)
permtest(High7, Low7)
?permtest
?permtest
2^7
permtest(High7-Low7)
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)
permtest(High7-Low7)
High7=c( 0.855,.904,.759, .769)
Low7=c(-.773, -.700, -.771, -.743)
permtest(High7-Low7)
High7=c( 0.855,.904,.759)
Low7=c(-.773, -.700, -.771)
permtest(High7-Low7)
t.test(High7-Low7)
permtest(High7-Low7)
install.packages('exactRankTests')
permtest(High7-Low7)
library(exactRankTests)
perm.test(High7-Low7)
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)
library(exactRankTests)
perm.test(High7-Low7)
?perm.test
permtest(High7-Low7)
perm.test(High7-Low7, paired=F)
?permtest
?permTS
install.packages('perm')
?permTS
library(perm)
?permTS
permtest(High7-Low7)
permTS(High7-Low7)
perm.test(High7-Low7, exact=TRUE)
perm.test(High7-Low7, exact=TRUE)$p.value
perm.test(High7-Low7, paired=T, exact=TRUE)$p.value
permtest(High7-Low7)
High7=c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7=c(-.773, -.700, -.771, -.743, .794, .669, -.618)
dat <- c(High7, Low7)
nam <- rep(c(0,1), c(7,7))
permTS(dat~nam, exact=TRUE)
install.packages('coin')
?oneway_test
library(coin)
?oneway_test
id <- factor(nam)
pvalue(oneway_test(dat~nam|id, distribution=approximate(B=9999)))
￼# transform a number into a binary vectorbinary <- function(number, noBits) {  binary_vector <- rev(as.numeric(intToBits(number))) if(missing(noBits)) {    return(binary_vector)  } else {    binary_vector[-(1:(length(binary_vector) - noBits))] }}# use exhaustive methodHigh7 <- c( 0.855,.904,.759, .769, -.698, -.814, .843)Low7 <- c(-.773, -.700, -.771, -.743, .794, .669, -.618)sums <- rep(0, 2^7)d <- High7 - Low7for(i in 1:2^7) {  signs <- 2*binary(i, 7)-1  sums[i] <- sum(d*signs) }sum(sums>=sum(d)) # 7 cases have the sum as large or larger than observationhist(sums, main='histogram of the test statistic', xlab='test statistic', breaks=20)abline(v=sum(d))
￼# transform a number into a binary vectorbinary <- function(number, noBits) {  binary_vector <- rev(as.numeric(intToBits(number))) if(missing(noBits)) {    return(binary_vector)  } else {    binary_vector[-(1:(length(binary_vector) - noBits))] }}# use exhaustive methodHigh7 <- c( 0.855,.904,.759, .769, -.698, -.814, .843)Low7 <- c(-.773, -.700, -.771, -.743, .794, .669, -.618)sums <- rep(0, 2^7)d <- High7 - Low7for(i in 1:2^7) {  signs <- 2*binary(i, 7)-1  sums[i] <- sum(d*signs) }sum(sums>=sum(d)) # 7 cases have the sum as large or larger than observation
binary <- function(number, noBits) {  binary_vector <- rev(as.numeric(intToBits(number))) if(missing(noBits)) {    return(binary_vector)  } else {    binary_vector[-(1:(length(binary_vector) - noBits))] }}
# transform a number into a binary vectorbinary <- function(number, noBits) {  binary_vector <- rev(as.numeric(intToBits(number)))  if(missing(noBits)) {    return(binary_vector)  }   else {    binary_vector[-(1:(length(binary_vector) - noBits))]  }}# use exhaustive methodHigh7 <- c( 0.855,.904,.759, .769, -.698, -.814, .843)Low7 <- c(-.773, -.700, -.771, -.743, .794, .669, -.618)sums <- rep(0, 2^7)d <- c(1, 6, 4, 6, 2, 3, 5)for(i in 1:2^7) {  signs <- 2*binary(i, 7)-1  sums[i] <- sum(d*signs)}sum(sums>=sum(d))  # 7 cases have the sum as large or larger than observationhist(sums, main='histogram of the test statistic', xlab='test statistic', breaks=20)abline(v=sum(d))
# transform a number into a binary vector
binary <- function(number, noBits) {
binary_vector <- rev(as.numeric(intToBits(number)))
if(missing(noBits)) {
return(binary_vector)
}
else {
binary_vector[-(1:(length(binary_vector) - noBits))]
}
}
# use exhaustive method
High7 <- c( 0.855,.904,.759, .769, -.698, -.814, .843)
Low7 <- c(-.773, -.700, -.771, -.743, .794, .669, -.618)
sums <- rep(0, 2^7)
d <- c(1, 6, 4, 6, 2, 3, 5)
for(i in 1:2^7) {
signs <- 2*binary(i, 7)-1
sums[i] <- sum(d*signs)
}
sum(sums>=sum(d))  # 7 cases have the sum as large or larger than observation
hist(sums, main='histogram of the test statistic', xlab='test statistic', breaks=20)
abline(v=sum(d))
sum(sums>=sum(d))/2^7
install.packages("rmarkdown")
install.packages("Rcpp")
install.packages("RcppArmadillo")
install.packages("dr")
summary(mod1)
library(dr)
data(ais)
mod1 <- dr(LBM~log(Ferr)+log(Hc)+log(Hg)+log(Ht)+log(RCC)+log(WCC)+log(Wt), data=ais, method="sir", nslices=8)
summary(mod1)
pairs(LBM~log(Ferr)+log(Hc)+log(Hg)+log(Ht)+log(RCC)+log(WCC)+log(Wt), data=ais)
library(ldr)
?ldr
?dr
mod1$evectors
mod1$evectors['Dir1']
mod1$evectors[,1]
head(mod1$x)
dir1 <- mod1$x %*% mod1$evectors[,1]
dim(dir1)
sir2 <- mod1$x %*% mod1$evectors[,2]
BSP.pch = c(2,15,21)
BSP.pch = sapply(BSP[,1], function(x) BSP.pch[x+1])
BSP = read.table('birdsplanescars_R.txt')
class <- (ais$LBM > median(ais$LBM))
class
class <- (ais$LBM > median(ais$LBM))*3+1
class
plot(sir2~sir1, pch=class)
sir1 <- mod1$x %*% mod1$evectors[,1]
sir2 <- mod1$x %*% mod1$evectors[,2]
## plot of the first two directions, grouped by values of LBM
class <- (ais$LBM > median(ais$LBM))*3+1
plot(sir2~sir1, pch=class)
class <- (ais$LBM > median(ais$LBM))+1
plot(sir2~sir1, pch=class)
plot(sir2~sir1, pch=class, col=class)
class <- (ais$LBM > median(ais$LBM))*19+1
plot(sir2~sir1, pch=class, col=class)
class <- (ais$LBM > median(ais$LBM))*17+2
plot(sir2~sir1, pch=class, col=class)
class <- (ais$LBM < median(ais$LBM))*17+2
plot(sir2~sir1, pch=class)
plot(ais$LBM~sir1)
scatter.smooth(sir1, ais$LBM)
?scatter.smooth
scatter.smooth(sir1, ais$LBM, degree=1)
scatter.smooth(sir1, ais$LBM, degree=2)
plot(ais$LBM~sir1)
lines(loess(ais$LBM, sir1))
lines(loess(sir1, ais$LBM))
lmod <- lm(ais$LBM~sir1)
qmod <- nls(ais$LBM~sir1^2)
qmod <- lm(ais$LBM~sir1+sir1^2)
plot(ais$LBM~sir1)
lines(sir1, predict(lmod))
lines(sir1, predict(qmod))
lines(sir1, sir1^2, predict(qmod))
lines(sir1, predict(qmod, newdata=data.frame(sir1, sir1^2)))
lines(sir1, predict(qmod, newdata=cbind(sir1, sir1^2)))
lines(sir1, predict(qmod, newdata=as.data.frame(cbind(sir1, sir1^2)))
)
plot(ais$LBM~sir1)
lines(sir1, predict(qmod, newdata=as.data.frame(cbind(sir1, sir1^2))))
qmod <- lm(ais$LBM~sir1^2)
lines(sir1^2, predict(qmod))
lines(sir1, predict(qmod))
lmod <- lm(ais$LBM~sir1)
qmod <- lm(ais$LBM~sir1^2)
plot(ais$LBM~sir1)
lines(sir1, predict(lmod))
lines(sir1, predict(qmod))
qmod <- lm(ais$LBM~I(sir1)^2)
lines(sir1, predict(qmod))
qmod <- lm(ais$LBM~I(sir1^2))
plot(ais$LBM~sir1)
lines(sir1, predict(lmod))
lines(sir1, predict(qmod))
plot(ais$LBM~sir1)
#lines(sir1, predict(lmod))
lines(sir1, predict(qmod))
plot(ais$LBM~sir1)
pairs(LBM~log(Ferr)+log(Hc)+log(Hg)+log(Ht)+log(RCC)+log(WCC)+log(Wt), data=ais)
summary(mod1)
class <- (ais$LBM < median(ais$LBM))*17+2
plot(sir2~sir1, pch=class)
getwd()
setwd('/Users/si/Dropbox/Data-Science/Round2_si/Slides)
)
''
'
setwd('/Users/si/Dropbox/Data-Science/Round2_si/Slides')
install.packages('png')
install.packages('grid')
install.packages('grid')
install.packages("grid")
library(png)
